Here are ten integer factorization problems, ranging from basic to advanced levels, for practicing in C++:

Basic Level:

Write a C++ program to find the prime factors of a given positive integer.
Implement a program to find the number of divisors of a given integer.
Create a function to check if a given integer is a perfect square or not.
Find the least common multiple (LCM) of two given integers using prime factorization.
Write a program to find the greatest common divisor (GCD) of two integers using prime factorization.
Intermediate Level:

Implement a program to find the smallest prime factor of a given integer.
Create a C++ program to find the Euler's totient function (phi) for a positive integer using prime factorization.
Write a program to determine if a given integer is a semiprime (a product of two prime numbers).
Implement a C++ program to find the prime factors of a large composite number efficiently.
Develop a program to factorize a large semiprime number (e.g., RSA-2048) using a sophisticated factorization algorithm.
Advanced Level:

Write a program to factorize a large composite number using Pollard's Rho Algorithm.
Create a program to perform the elliptic curve factorization of a large composite number.
Implement a program to find the factorization of a large integer using quadratic sieve (QS).
Develop a program to factorize a large composite number using the number field sieve (NFS).
Write a C++ program to factorize a large semiprime number efficiently, e.g., RSA-4096.
These problems cover a wide range of factorization challenges, from basic operations to advanced techniques and algorithms. They will help you enhance your understanding of integer factorization in C++.